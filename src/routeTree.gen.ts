/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ZodFormImport } from './routes/zodForm'
import { Route as RegisterImport } from './routes/register'
import { Route as ReactFormImport } from './routes/reactForm'
import { Route as LoginImport } from './routes/login'
import { Route as FormImport } from './routes/form'
import { Route as Layout1Import } from './routes/_layout1'
import { Route as KanbanBoardImport } from './routes/KanbanBoard'
import { Route as Layout1UserIndexImport } from './routes/_layout1/user/index'
import { Route as Layout1DashboardIndexImport } from './routes/_layout1/dashboard/index'
import { Route as Layout1UserRoute1Import } from './routes/_layout1/user/route1'
import { Route as Layout1UserDashBoardImport } from './routes/_layout1/user/dashBoard'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ZodFormRoute = ZodFormImport.update({
  path: '/zodForm',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const ReactFormRoute = ReactFormImport.update({
  path: '/reactForm',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FormRoute = FormImport.update({
  path: '/form',
  getParentRoute: () => rootRoute,
} as any)

const Layout1Route = Layout1Import.update({
  id: '/_layout1',
  getParentRoute: () => rootRoute,
} as any)

const KanbanBoardRoute = KanbanBoardImport.update({
  path: '/KanbanBoard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const Layout1UserIndexRoute = Layout1UserIndexImport.update({
  path: '/user/',
  getParentRoute: () => Layout1Route,
} as any)

const Layout1DashboardIndexRoute = Layout1DashboardIndexImport.update({
  path: '/dashboard/',
  getParentRoute: () => Layout1Route,
} as any)

const Layout1UserRoute1Route = Layout1UserRoute1Import.update({
  path: '/user/route1',
  getParentRoute: () => Layout1Route,
} as any)

const Layout1UserDashBoardRoute = Layout1UserDashBoardImport.update({
  path: '/user/dashBoard',
  getParentRoute: () => Layout1Route,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/KanbanBoard': {
      id: '/KanbanBoard'
      path: '/KanbanBoard'
      fullPath: '/KanbanBoard'
      preLoaderRoute: typeof KanbanBoardImport
      parentRoute: typeof rootRoute
    }
    '/_layout1': {
      id: '/_layout1'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Layout1Import
      parentRoute: typeof rootRoute
    }
    '/form': {
      id: '/form'
      path: '/form'
      fullPath: '/form'
      preLoaderRoute: typeof FormImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/reactForm': {
      id: '/reactForm'
      path: '/reactForm'
      fullPath: '/reactForm'
      preLoaderRoute: typeof ReactFormImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/zodForm': {
      id: '/zodForm'
      path: '/zodForm'
      fullPath: '/zodForm'
      preLoaderRoute: typeof ZodFormImport
      parentRoute: typeof rootRoute
    }
    '/_layout1/user/dashBoard': {
      id: '/_layout1/user/dashBoard'
      path: '/user/dashBoard'
      fullPath: '/user/dashBoard'
      preLoaderRoute: typeof Layout1UserDashBoardImport
      parentRoute: typeof Layout1Import
    }
    '/_layout1/user/route1': {
      id: '/_layout1/user/route1'
      path: '/user/route1'
      fullPath: '/user/route1'
      preLoaderRoute: typeof Layout1UserRoute1Import
      parentRoute: typeof Layout1Import
    }
    '/_layout1/dashboard/': {
      id: '/_layout1/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof Layout1DashboardIndexImport
      parentRoute: typeof Layout1Import
    }
    '/_layout1/user/': {
      id: '/_layout1/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof Layout1UserIndexImport
      parentRoute: typeof Layout1Import
    }
  }
}

// Create and export the route tree

interface Layout1RouteChildren {
  Layout1UserDashBoardRoute: typeof Layout1UserDashBoardRoute
  Layout1UserRoute1Route: typeof Layout1UserRoute1Route
  Layout1DashboardIndexRoute: typeof Layout1DashboardIndexRoute
  Layout1UserIndexRoute: typeof Layout1UserIndexRoute
}

const Layout1RouteChildren: Layout1RouteChildren = {
  Layout1UserDashBoardRoute: Layout1UserDashBoardRoute,
  Layout1UserRoute1Route: Layout1UserRoute1Route,
  Layout1DashboardIndexRoute: Layout1DashboardIndexRoute,
  Layout1UserIndexRoute: Layout1UserIndexRoute,
}

const Layout1RouteWithChildren =
  Layout1Route._addFileChildren(Layout1RouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/KanbanBoard': typeof KanbanBoardRoute
  '': typeof Layout1RouteWithChildren
  '/form': typeof FormRoute
  '/login': typeof LoginRoute
  '/reactForm': typeof ReactFormRoute
  '/register': typeof RegisterRoute
  '/zodForm': typeof ZodFormRoute
  '/user/dashBoard': typeof Layout1UserDashBoardRoute
  '/user/route1': typeof Layout1UserRoute1Route
  '/dashboard': typeof Layout1DashboardIndexRoute
  '/user': typeof Layout1UserIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/KanbanBoard': typeof KanbanBoardRoute
  '': typeof Layout1RouteWithChildren
  '/form': typeof FormRoute
  '/login': typeof LoginRoute
  '/reactForm': typeof ReactFormRoute
  '/register': typeof RegisterRoute
  '/zodForm': typeof ZodFormRoute
  '/user/dashBoard': typeof Layout1UserDashBoardRoute
  '/user/route1': typeof Layout1UserRoute1Route
  '/dashboard': typeof Layout1DashboardIndexRoute
  '/user': typeof Layout1UserIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/KanbanBoard': typeof KanbanBoardRoute
  '/_layout1': typeof Layout1RouteWithChildren
  '/form': typeof FormRoute
  '/login': typeof LoginRoute
  '/reactForm': typeof ReactFormRoute
  '/register': typeof RegisterRoute
  '/zodForm': typeof ZodFormRoute
  '/_layout1/user/dashBoard': typeof Layout1UserDashBoardRoute
  '/_layout1/user/route1': typeof Layout1UserRoute1Route
  '/_layout1/dashboard/': typeof Layout1DashboardIndexRoute
  '/_layout1/user/': typeof Layout1UserIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/KanbanBoard'
    | ''
    | '/form'
    | '/login'
    | '/reactForm'
    | '/register'
    | '/zodForm'
    | '/user/dashBoard'
    | '/user/route1'
    | '/dashboard'
    | '/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/KanbanBoard'
    | ''
    | '/form'
    | '/login'
    | '/reactForm'
    | '/register'
    | '/zodForm'
    | '/user/dashBoard'
    | '/user/route1'
    | '/dashboard'
    | '/user'
  id:
    | '__root__'
    | '/'
    | '/KanbanBoard'
    | '/_layout1'
    | '/form'
    | '/login'
    | '/reactForm'
    | '/register'
    | '/zodForm'
    | '/_layout1/user/dashBoard'
    | '/_layout1/user/route1'
    | '/_layout1/dashboard/'
    | '/_layout1/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  KanbanBoardRoute: typeof KanbanBoardRoute
  Layout1Route: typeof Layout1RouteWithChildren
  FormRoute: typeof FormRoute
  LoginRoute: typeof LoginRoute
  ReactFormRoute: typeof ReactFormRoute
  RegisterRoute: typeof RegisterRoute
  ZodFormRoute: typeof ZodFormRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  KanbanBoardRoute: KanbanBoardRoute,
  Layout1Route: Layout1RouteWithChildren,
  FormRoute: FormRoute,
  LoginRoute: LoginRoute,
  ReactFormRoute: ReactFormRoute,
  RegisterRoute: RegisterRoute,
  ZodFormRoute: ZodFormRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/KanbanBoard",
        "/_layout1",
        "/form",
        "/login",
        "/reactForm",
        "/register",
        "/zodForm"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/KanbanBoard": {
      "filePath": "KanbanBoard.tsx"
    },
    "/_layout1": {
      "filePath": "_layout1.tsx",
      "children": [
        "/_layout1/user/dashBoard",
        "/_layout1/user/route1",
        "/_layout1/dashboard/",
        "/_layout1/user/"
      ]
    },
    "/form": {
      "filePath": "form.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/reactForm": {
      "filePath": "reactForm.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/zodForm": {
      "filePath": "zodForm.tsx"
    },
    "/_layout1/user/dashBoard": {
      "filePath": "_layout1/user/dashBoard.tsx",
      "parent": "/_layout1"
    },
    "/_layout1/user/route1": {
      "filePath": "_layout1/user/route1.tsx",
      "parent": "/_layout1"
    },
    "/_layout1/dashboard/": {
      "filePath": "_layout1/dashboard/index.tsx",
      "parent": "/_layout1"
    },
    "/_layout1/user/": {
      "filePath": "_layout1/user/index.tsx",
      "parent": "/_layout1"
    }
  }
}
ROUTE_MANIFEST_END */
